GRAPHQL
<ul>
	<li>It isagrrement between frontend and backend based on GRAPHQL schema</li>
	<li>GRAPHQL context - object, that flows accross whole execution</li>
	<li>Sangria cannot reuse case classes defined in our domain, it needs its own object of type ObjectType</li>
	<li>Fetchers and Deferred Resolvers - used for batch retrieval of objects from their sources. Fetcher is specialized DR: 
	<ul>
		<li>it provides high level API</li>
		<li>it optimizes resolution of fetched entities based on ID or relation</li>
		<li>it deduplicates entities and caches the results</li>
	</ul>
	Example of usage
	<pre><code>
	import sangria.execution.deferred.Fetcher

	val linksFetcher = Fetcher(
	  (ctx: MyContext, ids: Seq[Int]) => ctx.dao.getLinks(ids)
	)(HasId(_.id))
	
	//add after linksFetcher:
	val Resolver = DeferredResolver.fetchers(linksFetcher)
	
	// usage
	Field("links",
	  ListType(LinkType),
	  arguments = List(Argument("ids", ListInputType(IntType))),
	  resolve = c => linksFetcher.deferSeq(c.arg(Ids))
)
	Executor.execute(
	  GraphQLSchema.SchemaDefinition,
	  query,
	  MyContext(dao),
	  variables = vars,
	  operationName = operation,
	  deferredResolver = GraphQLSchema.Resolver
)</code></pre>
	That optimizes query <strong>before</strong> call.
	</li>
</ul>