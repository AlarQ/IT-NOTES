onads - kind of types having some fundamental operations: unit, and flatMap.
<pre><code>trait MonadTemplate[A]{
	def unit(value: A): MonadTemplate[A] // named also apply, pure
	def flatMap[B](f: A => MonadTemplate[B]): MonadTemplate[B] // named also bind
}</code></pre>
Example of monads: Option, Try, Future, Stream, Set<br>
Monad Laws:
<ul>
   <li>
      left-identity:
	  <pre><code>unit(x).flatMap(f) == f(x)</code></pre>
   </li>
   <li>right-identity:
   <pre><code>aMonadInstance.flatMap(unit) == aMonadInstance</code></pre>
   </li>
   <li>associativity:
   <pre><code>flatMap(f).flatMap(g) == flatMap(x => f(x).flatMap(g))</code></pre>
   </li>
</ul>